import discord
from discord.ext import commands
from discord import app_commands
from googleapiclient.discovery import build
import yt_dlp as youtube_dl
import os
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Diret√≥rio de dados
DATA_DIR = 'data'

class GoogleCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.ffmpeg_executable = "ffmpeg"  # Caminho do execut√°vel do FFmpeg
        self.voice_clients = {}  # Dicion√°rio para gerenciar conex√µes de voz

        # Certifique-se de que o diret√≥rio de dados exista
        if not os.path.exists(DATA_DIR):
            os.makedirs(DATA_DIR)

        # Carregando credenciais da API do YouTube
        self.youtube = build('youtube', 'v3', developerKey=os.getenv('YOUTUBE_API_KEYS'))

    @app_commands.command(name="play", description="üé∂ Reproduz uma m√∫sica no canal de voz.")
    async def play_audio(self, interaction: discord.Interaction, musica: str):
        """Reproduz m√∫sica no canal de voz a partir de uma busca no YouTube."""
        
        # Procurar o v√≠deo no YouTube usando a API
        video_url, title = await self.buscar_no_youtube(musica)
        if not video_url:
            await interaction.response.send_message("‚ùå N√£o foi poss√≠vel encontrar a m√∫sica.", ephemeral=True)
            return
        
        # Conectar no canal de voz
        voice_channel = interaction.user.voice.channel
        if not voice_channel:
            await interaction.response.send_message("‚ùå Voc√™ precisa estar em um canal de voz para usar este comando.", ephemeral=True)
            return
        
        # Conectar ao canal de voz
        voice_client = await voice_channel.connect()

        # Reproduzir o √°udio no canal de voz
        await self.play_audio_from_url(voice_client, video_url)

        await interaction.response.send_message(f"üé∂ Tocando: {title}")

    async def buscar_no_youtube(self, termo):
        """Busca flex√≠vel no YouTube usando a API."""
        request = self.youtube.search().list(
            part="snippet",
            q=termo,
            type="video",
            maxResults=1
        )
        response = request.execute()

        if 'items' in response and response['items']:
            video = response['items'][0]  # Seleciona o primeiro resultado da busca
            video_id = video['id']['videoId']
            video_url = f"https://www.youtube.com/watch?v={video_id}"
            title = video['snippet']['title']
            return video_url, title
        return None, None

    async def play_audio_from_url(self, voice_client, video_url):
        """Usa yt-dlp para baixar o √°udio do v√≠deo e reproduzir no Discord."""
        ydl_opts = {
            'format': 'bestaudio/best',  # Melhor qualidade de √°udio
            'noplaylist': True,  # N√£o pegar playlists
            'quiet': True,  # Evitar prints desnecess√°rios
            'extractaudio': True,  # Extrair o √°udio
            'audioquality': 1,  # Melhor qualidade de √°udio
            'outtmpl': 'downloads/%(id)s.%(ext)s',  # Onde o √°udio ser√° salvo temporariamente
            'postprocessors': [{
                'key': 'FFmpegAudio',
                'preferredcodec': 'mp3',  # Salva como mp3
                'preferredquality': '192',  # Qualidade 192kbps
            }],
        }

        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            # Baixar o √°udio do v√≠deo
            info_dict = ydl.extract_info(video_url, download=False)
            url2 = info_dict['formats'][0]['url']

            # Criar uma fonte de √°udio a partir da URL
            voice_client.play(discord.FFmpegPCMAudio(url2, executable=self.ffmpeg_executable))

    @app_commands.command(name="stop", description="‚ùå Para a m√∫sica atual.")
    async def stop_audio(self, interaction: discord.Interaction):
        """Para a m√∫sica no canal de voz."""
        voice_client = discord.utils.get(self.bot.voice_clients, guild=interaction.guild)
        if voice_client and voice_client.is_playing():
            voice_client.stop()
            await interaction.response.send_message("‚ùå M√∫sica parada.")
        else:
            await interaction.response.send_message("‚ùå N√£o h√° m√∫sica tocando no momento.")

    @app_commands.command(name="pause", description="‚è∏ Pausa a m√∫sica atual.")
    async def pause_audio(self, interaction: discord.Interaction):
        """Pausa a m√∫sica no canal de voz."""
        voice_client = discord.utils.get(self.bot.voice_clients, guild=interaction.guild)
        if voice_client and voice_client.is_playing():
            voice_client.pause()
            await interaction.response.send_message("‚è∏ M√∫sica pausada.")
        else:
            await interaction.response.send_message("‚ùå N√£o h√° m√∫sica tocando no momento.")

    @app_commands.command(name="resume", description="‚ñ∂ Retoma a m√∫sica pausada.")
    async def resume_audio(self, interaction: discord.Interaction):
        """Retoma a m√∫sica no canal de voz."""
        voice_client = discord.utils.get(self.bot.voice_clients, guild=interaction.guild)
        if voice_client and voice_client.is_paused():
            voice_client.resume()
            await interaction.response.send_message("‚ñ∂ M√∫sica retomada.")
        else:
            await interaction.response.send_message("‚ùå N√£o h√° m√∫sica pausada no momento.")

async def setup(bot):
    await bot.add_cog(GoogleCommands(bot))